function result = f_disprof(Y,dis,iter,verb,plt,verb2)
% - dissimilarity profile analysis (DISPROF, SIMPROF)
%
% USAGE: result = f_disprof(Y,'dis',iter,verb,plt);
%
% Y    = matrix of response variables (rows = obs, cols = variables)
% dis  = dissimilarity measure to apply to Y
%        (e.g., dis = 'bc'; see help for f_dis)
% iter = #  permutation iterations                                 (default = 0)
% verb = send results to display                                   (default = 1)
% plt  = optionally create a plot                                  (default = 0)
%
% result = structure of results with the following fields:
%  .D       = observed dissimilarity profile
%  .meanD   = mean permuted dissimilarity profile
%  .Pi      = Pi statistic (= deviation of observed vs. permuted mean profile)
%  .p       = randomized probability
%
% SEE ALSO: f_dis, f_disprof_clust

% -----Notes:-----
% This function follows Clarke et al.'s (2008) description of similarity profile
% analysis (SIMPROF), but employs an equivalent approach based on dissimilarity
% profile analysis (DISPROF).
%
% A null hypothesis of no multivariate structure is generated by calculating a
% mean dissimilarity profile based on random permutations of the raw response
% data. This approach follows a "Model 1: Environmental control over individual
% species" permutational model described in Legendre & Legendre (2012:
% page 619), whereby each column of data (i.e., the species) are permuted
% separately.
%
% Note: when permuting the data, an internal flag ('nanFlag=0') is sent to the
% 'f_dis' function so NaN's are replaced by 1's; this accounts for instances
% when permutation of the raw response data results in more than one row
% consisting of all zeros, which in turn causes metrics like the Bray-Curtis
% coefficient to returns NaN's after dividing 0 by 0.

% -----References:-----
% Clarke, K. R., P. J. Somerfield, and R. N. Gorley. 2008.  Testing null
%   hypotheses in exploratory community analyses: similarity profiles and
%   biota-environmental linkage. J. Exp. Mar. Biol. Ecol. 366:56-69.
% Legendre, P. & L. Legendre. 2012. Numerical ecology. 3rd English ed.
%   Elsevier Science BV, Amsterdam. [p. 619]

% -----Author:-----
% by David L. Jones, Jan-2014
%
% This file is part of the 'FATHOM TOOLBOX FOR MATLAB' and is released under
% the GNU General Public License, version 2.

% Feb-2014: updated figure legend, axis labels, & tick marks

% -----Set defaults & check input:-----
if (nargin <  3), iter  = 0; end % no permutation test by default
if (nargin <  4), verb  = 1; end % send output to display by default
if (nargin <  5), plt   = 0; end % no plot by default
if (nargin <  6), verb2 = 1; end % internal flag for f_mstCluster

% Set # iterations for permutated dissimilarity profile:
if (iter<1000)
   iterM = 1000; % need at least 1000
else
   iterM = iter;
end
% -------------------------------------

% Create observed dissimilarity profile by calculating disimilarities, unwrap,
% & sort:
D = sort(f_unwrap(f_dis(Y,dis),0),1,'ascend'); % all dissimilarities

%-----Calculate mean permuted dissimilarity profile:-----
if (verb2>0)
   fprintf('\nCalculating mean dissimilarity profile from %d permutations...\n',iterM-1);
end

permD = zeros(size(D,1),iterM-1); % preallocate

for i = 1:(iterM-1) % observed value is considered a permutation
   % Permute species (cols) separately [L&L:1998 p.569]
   permD(:,i) = sort(f_unwrap(f_dis(f_shuffle(Y,3),dis,0,1,0),0),1,'ascend');
end

meanD = mean(permD,2); % mean permuted dissimilarity profile
%-----------------------------

% Calculate deviation of observed profile vs. mean permuted profile:
Pi = sum(abs(D - meanD));

%-----Permutation tests:-----
if iter>0
   if (verb2>0)
      fprintf('Calculating significance levels from %d permutations...\n',iter-1);
   end
   
   randPi = zeros(iter-1,1); % preallocate
   for i = 1:(iter-1) % observed value is considered a permutation
      
      % Create new permuted profile to compare to mean permuted profile:
      randD = sort(f_unwrap(f_dis(f_shuffle(Y,3),dis,0,1,0),0),1,'ascend');
      
      % Calculate deviation of new permuted profile vs. mean permuted profile:
      randPi(i) = sum(abs(randD - meanD)); % permuted Pi stat
   end
   p = (sum(randPi >= Pi)+1) ./ (iter); % count values & convert to probability
else
   p = NaN;
end
%-----------------------------

% -----Send output to display:-----
if (verb>0)
   fprintf('\n==================================================\n');
   fprintf('      DISPROF - Dissimilarity Profile Analysis:\n');
   fprintf('--------------------------------------------------\n');
   fprintf('Pi stat = %-3.4f  p =  %3.5f \n',Pi,p);
   fprintf('No. of permutations = %d \n',iter);
   fprintf('--------------------------------------------------\n\n');
end

% -----Optionally create a plot:-----
if (plt>0)
   nr = numel(D); % get # rows of D
   
   figure('Name','DISPROF');
   set(gcf,'color','w'); % set bg color to white
   hold on;
   hdl(1) = plot(1:nr,D,'-b');                                     % observed DISPROF
   hdl(2) = plot(1:nr,meanD,'Color',[1 1 1]*0.70,'LineStyle','-'); % mean permuted DISPROF
   
   % Calculate 99% confidence envelopes:
   plus_3SD  = meanD + 3*std(permD,0,2); % mean + 3SD's
   minus_3SD = meanD - 3*std(permD,0,2); % mean - 3SD's
   
   % Truncate so no negative similarities:
   plus_3SD(plus_3SD<0)   = 0;
   minus_3SD(minus_3SD<0) = 0;
   
   % Plot confidence envelopes:
   hdl(3) = plot(1:nr,plus_3SD,'Color',[1 1 1]*0.70,'LineStyle','--');
   hdl(4) = plot(1:nr,minus_3SD,'Color',[1 1 1]*0.70,'LineStyle','--');
   
   % Customize plot:
   box on;
   xlabel('Sort Order');
   ylabel('Dissimilarity');
   title('DISPROF: Dissimilarity Profile Analysis');
   
   % Make sure the Y-Axis is not > 1 for metrics like Bray-Curtis:
   if isequal(dis,'bc')
      axisVar = axis;
      if (axisVar(4)>1)
         axis([axisVar(1) axisVar(2) axisVar(3) 1])
      end
   end
   
   % Create legend:
   labels = {'observed profile' 'permuted mean' '99% CI'};
   legend(hdl(1:3),labels,'location','Best');
   
   % Customize the plot so 1st tick mark isn't 0:
   xlimVar = xlim;
   xlim([0.75 xlimVar(2)]);
end

% Wrap results up into a structure:
result.D     = D;     % observed dissimilarity profile
result.meanD = meanD; % mean permuted dissimilarity profile
result.Pi    = Pi;    % Pi statistic (= deviation of observed vs. permuted mean profile)
result.p     = p;     % randomized probability
